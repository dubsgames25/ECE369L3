.data
asize0:  .word    4,  4,  2, 2   # i, j, k, l
frame0:  .word    0,  0,  1,  2
         .word    0,  0,  3,  4
         .word    0,  0,  0,  0
         .word    0,  0,  0,  0
window0: .word    1,  2
         .word    3,  4
         
newline: .asciiz     "\n" 
bracket_1: .asciiz     "[" 
bracket_2: .asciiz     "]" 
comma: .asciiz     "," 
window: .asciiz "This is the window value"
match: .asciiz "Match at "


.text

.globl main




main:

la $a0,asize0
la $a1,frame0
la $a2,window0

lw $s0,0($a0)#i
lw $s1,4($a0)#j
lw $s2,8($a0)#k
lw $s3,12($a0)#l



move $t0,$zero
add $t1,$t1,$s2
sub $t1,$t1,1
li $t2,0
li $t3,0
li $t4,0
li $t5,0
li $t6,0
li $t7,0
li $t8,0
li $t9,0
#jal iterate_Window
j iterate_window




next_one:


jal print_newline


move $t0,$zero
sub $t1,$s0,$s2
addi $t1,$t1,1

li $t2,0
li $t3,0
li $t4,0
li $t5,0
li $t6,0
li $t7,0
li $t8,0
li $t9,0

j iterate_rightF
next_one2:

jal print_newline


move $t0,$zero
sub $t1,$s1,$s3
addi $t1,$t1,1
move $s7, $s2

li $t2,0
li $t3,0
li $t4,0
li $t5,0
li $t6,0
li $t7,0
li $t8,0
li $t9,0

j iterate_down
next_one3:

jal print_newline

move $t0,$zero
sub $t1,$s1,$s3
addi $t1,$t1,1
sub $s7, $s0,$s2

li $t2,0
li $t3,0
li $t4,0
li $t5,0
li $t6,0
li $t7,0
li $t8,0
li $t9,0

#j iterate_left
next_one4:


ending_program:






j program_end





iterate_window:

beq   $t0,$t1,leave_window
la $t2,window0#regiter
sll $t3,$t0,2# multiply t3 by 4
add $t2,$t2,$t3#register plus offset of #t3
li $t4,0 #intialize #t4
add $t4,$t4,$t2   #store rgister offset value to t4
#if we are at the first index of the frame0 we move right to get the values of the window and the values of the frame0
li $t6,0
loop_F:
beq  $t6,$s2,exit_i
lw $s4,0($t4)
add $v0,$v0,$s4
li $t7,1
loopj:
beq $t7,$s3,jend
#increments j by whatever framesize and getting 4 bites then adding it to t4 to offset
sll $t8,$s2,2
add $t4,$t4,$t8
lw $s4,0($t4)
add $v0,$v0,$s4
addi $t7,$t7,1
j loopj
jend:
sub $t8,$t8,4
sub $t4,$t4,$t8
li $t8,0
addi $t6,$t6,1
j loop_F
exit_i:
jal print_voW
addi $t0,$t0,1   
j iterate_window
leave_window:
j next_one




iterate_rightF:
beq   $t0,$t1,leave_right
la $t2,frame0#regiter
sll $t3,$t0,2# multiply t3 by 4
add $t2,$t2,$t3#register plus offset of #t3
li $t4,0 #intialize #t4
add $t4,$t4,$t2   #store rgister offset value to t4
#if we are at the first index of the frame0 we move right to get the values of the window and the values of the frame0
li $t6,0
loop_F1:
beq  $t6,$s2,exit_i1
lw $s4,0($t4)
add $v0,$v0,$s4
li $t7,1
jal check_index
loopj1:
beq $t7,$s3,jend1
#increments j by whatever framesize and getting 4 bites then adding it to t4 to offset
sll $t8,$s0,2
add $t4,$t4,$t8
lw $s4,0($t4)
add $v0,$v0,$s4
addi $t7,$t7,1
j loopj1
jend1:
sub $t8,$t8,4
sub $t4,$t4,$t8
li $t8,0
addi $t6,$t6,1
j loop_F1
exit_i1:
jal print_vo1
addi $t0,$t0,1   
j iterate_rightF
leave_right:
j next_one2


iterate_down:
beq $t0,$t1,leave_rightD#
la $t2,frame0#grabs the address of the first index of the register
sll $s7,$s7,2 #$s7 is 4 times 4 which makes it 16	
add $t2,$t2,$s7# we add 16 to our address
sll $t3,$t0,4# we get the iteration of window we need from $t0 and multiply it by 4 to give us 16, 
add $t2,$t2,$t3#register plus offset of #t3, first iteration is still at 16 second iteration will be 16 plus 32 then 16 plus 48
li $t4,0 #intialize #t4
add $t4,$t4,$t2   #store rgister offset value to t4
#if we are at the first index of the frame0 we move right to get the values of the window and the values of the frame0
li $t6,0
loop_F2:
beq  $t6,$s2,exit_i2#  this is the window size that we need to iterate from
lw $s4,0($t4)
add $v0,$v0,$s4
li $t7,1
jal check_index
loopj2:
beq $t7,$s3,jend2
#increments j by whatever framesize and getting 4 bites then adding it to t4 to offset
sll $t8,$s0,2
add $t4,$t4,$t8
lw $s4,0($t4)
add $v0,$v0,$s4
addi $t7,$t7,1
j loopj2
jend2:
sub $t8,$t8,4
sub $t4,$t4,$t8
li $t8,0
addi $t6,$t6,1
j loop_F2
exit_i2:
jal print_vo1
addi $t0,$t0,1   
j iterate_down
leave_rightD:
j next_one3



iterate_left:
beq   $t0,$t1,leave_left
la $t2,frame0#regiter
sll $t3,$t0,2# multiply t3 by 4
add $t2,$t2,$t3#register plus offset of #t3
li $t4,0 #intialize #t4
add $t4,$t4,$t2   #store rgister offset value to t4
#if we are at the first index of the frame0 we move right to get the values of the window and the values of the frame0
li $t6,0
loop_F3:
beq  $t6,$s2,exit_i1
lw $s4,0($t4)
add $v0,$v0,$s4
li $t7,1
jal check_index
loopj3:
beq $t7,$s3,jend3
#increments j by whatever framesize and getting 4 bites then adding it to t4 to offset
sll $t8,$s0,2
add $t4,$t4,$t8
lw $s4,0($t4)
add $v0,$v0,$s4
addi $t7,$t7,1
j loopj3
jend3:
sub $t8,$t8,4
sub $t4,$t4,$t8
li $t8,0
addi $t6,$t6,1
j loop_F1
exit_i3:
jal print_vo1
addi $t0,$t0,1   
j iterate_left
leave_left:
j next_one3


check_index:
bgtz $t0,skip
li $t9,0
add $t9,$t9,$t7
sub $t9,$t9,1
skip:
jr $ra



#next iteration

print_newline:

la $s6,newline
move $a0,$s6
li $v0,4
syscall
la $a0,asize0
li $v0,0

jr $ra

print_vo1:
#beq $v1,$v0,print_match
move $s4,$v0
la $s6,bracket_1
move $a0,$s6
li $v0,4
syscall
move $v0,$s4
move $a0,$v0
li $v0,1
syscall
la $a0,asize0
li $v0,0
la $s6,bracket_2
move $a0,$s6
li $v0,4
syscall
la $a0,asize0
li $v0,0
jr $ra


print_voW:
move $s4,$v0
move $v1,$v0
la $s6,window
move $a0,$s6
li $v0,4
syscall
la $s6,bracket_1
move $a0,$s6
li $v0,4
syscall
move $v0,$s4
move $a0,$v0
li $v0,1
syscall
la $a0,asize0
li $v0,0
la $s6,bracket_2
move $a0,$s6
li $v0,4
syscall
la $s6,newline
move $a0,$s6
li $v0,4
syscall
la $a0,asize0
li $v0,0
jr $ra


print_match:
la $s6,newline
move $a0,$s6
li $v0,4
syscall
la $s6,match
move $a0,$s6
li $v0,4
syscall
la $s6,bracket_1jal print_newline
move $a0,$s6
li $v0,4
syscall
move $a0,$t9
li $v0,1
syscall
la $s6,comma
move $a0,$s6
li $v0,4
syscall
move $a0,$t0
li $v0,1
syscall
la $s6,bracket_2
move $a0,$s6
li $v0,4
syscall




j program_end




program_end:
li $v0,10
syscall
  
 
    
    
    
    
