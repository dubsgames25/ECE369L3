.data
asize0:    .word 4, 4, 2, 2
frame0:    .word 0, 0, 1, 2
            .word 0, 0, 3, 4
            .word 0, 0, 0, 0
            .word 0, 0, 0, 0
window0:   .word 1, 2
            .word 3, 4
msg:       .asciiz "Lowest SAD indices: "

.text
.globl main

# Function: SAD
# Computes the Sum of Absolute Differences (SAD)
SAD:
    # $a0 = temp, $a1 = window, $a2 = size
    add $t0, $zero, $zero      # sum = 0
    add $t1, $zero, $zero      # windowSum = 0
    add $t2, $zero, $zero      # i = 0

SAD_loop:
    bge $t2, $a2, SAD_end      # if i >= size, return
    lw $t3, 0($a0)             # temp[i]
    add $t0, $t0, $t3          # sum += temp[i]
    lw $t4, 0($a1)             # window[i]
    add $t1, $t1, $t4          # windowSum += window[i]
    addi $t2, $t2, 1           # i++
    j SAD_loop

SAD_end:
    sub $t5, $t0, $t1          # sum - windowSum
    abs $v0, $t5                # return abs(sum - windowSum)
    jr $ra

# Function: ReadArr
# Reads from frame to temp
ReadArr:
    # $a0 = row, $a1 = col, $a2 = windowx, $a3 = windowy
    # $a4 = frame, $a5 = temp, $a6 = frameWidth
    add $t0, $zero, $zero   # i = 0

ReadArr_outer:
    beq $t0, $a2, ReadArr_end  # if i == windowx, return
    add $t1, $zero, $zero      # j = 0

ReadArr_inner:
    beq $t1, $a3, ReadArr_next_i  # if j == windowy, go to next i
    mul $t2, $t0, $a3        # i * windowy
    add $t2, $t2, $t1         # i * windowy + j
    mul $t3, $a4, $t0         # row * frameWidth
    add $t3, $t3, $a1         # row * frameWidth + col
    lw $t4, 0($t3)            # frame[(row + i) * frameWidth + (col + j)]
    sw $t4, 0($a5)            # temp[i * windowy + j]
    addi $t1, $t1, 1          # j++
    j ReadArr_inner

ReadArr_next_i:
    addi $t0, $t0, 1          # i++
    j ReadArr_outer

ReadArr_end:
    jr $ra

# Function: SearchPattern
# Searches for the pattern in the frame
SearchPattern:
    # $a0 = sizes, $a1 = frame, $a2 = window
    lw $t0, 0($a0)            # rows
    lw $t1, 4($a0)            # cols
    lw $t2, 8($a0)            # windowx
    lw $t3, 12($a0)           # windowy
    mul $t4, $t2, $t3         # windowx * windowy
    sll $t4, $t4, 2           # size in bytes (multiply by 4)
    sub $sp, $sp, $t4         # allocate temp on stack
    add $t5, $zero, $zero      # top = 0
    sub $t6, $t0, 1            # bottom = rows - 1
    add $t7, $zero, $zero      # left = 0
    sub $t8, $t1, 1            # right = cols - 1
    add $t9, $zero, $zero      # direction = 0
    li $s0, 2147483647         # lowestSAD = INT_MAX

SearchPattern_outer:
    bne $s0, $zero, SearchPattern_loop

SearchPattern_inner_right:
    beq $t9, $zero, MoveRight  # if direction == 0, move right
    beq $t9, 1, MoveDown       # if direction == 1, move down
    beq $t9, 2, MoveLeft       # if direction == 2, move left
    beq $t9, 3, MoveUp         # if direction == 3, move up

MoveRight:
    add $t0, $t5, $zero              # i = top
    add $t1, $zero, $t7        # j = left
MoveRight_loop:
    bgt $t1, $t8, MoveRight_next # if j > right, go to next
    jal ReadArr            # ReadArr(i, j, windowx, windowy, frame, temp, cols)
    add $a0, $t0, $zero
    add $a1, $t1, $zero
    add $a2, $t2, $zero
    add $a3, $t3, $zero
    add $a4, $a1, $zero
    add $a5, $sp, $zero
    add $a6, $t1, $zero
    jal SAD               # tempSAD = SAD(temp, window, windowx * windowy)
    # Compare tempSAD with lowestSAD
    bge $v0, $s0, MoveRight_next # if tempSAD >= lowestSAD, skip
    add $s0, $v0, $zero        # lowestSAD = tempSAD
    add $s1, $t0, $zero        # lowestSADIndexI = i
    add $s2, $t1, $zero        # lowestSADIndexJ = j
MoveRight_next:
    addi $t1, $t1, 1          # j++
    j MoveRight_loop

    addi $t5, $t5, 1          # top++
    addi $t9, $t9, 1          # direction = 1
    j SearchPattern_outer

MoveDown:
    sub $t1, $t8, $t2         # j = right - windowx + 1
MoveDown_loop:
    bgt $t5, $t6, MoveDown_next # if i > bottom, go to next
    jal ReadArr            # ReadArr(i, j, windowx, windowy, frame, temp, cols)
    add $a0, $t5, $zero
    add $a1, $t1, $zero
    add $a2, $t2, $zero
    add $a3, $t3, $zero
    add $a4, $a1, $zero
    add $a5, $sp, $zero
    add $a6, $t1, $zero
    jal SAD               # tempSAD = SAD(temp, window, windowx * windowy)
    # Compare tempSAD with lowestSAD
    bge $v0, $s0, MoveDown_next # if tempSAD >= lowestSAD, skip
    add $s0, $v0, $zero        # lowestSAD = tempSAD
    add $s1, $t5, $zero        # lowestSADIndexI = i
    add $s2, $t1, $zero        # lowestSADIndexJ = j
MoveDown_next:
    addi $t5, $t5, 1          # i++
    j MoveDown_loop

    sub $t8, $t8, 1           # right--
    addi $t9, $t9, 2          # direction = 2
    j SearchPattern_outer

MoveLeft:
    add $t5, $t6, $zero       # i = bottom
MoveLeft_loop:
    blt $t5, $t7, MoveLeft_next # if i < left, go to next
    jal ReadArr            # ReadArr(i, j, windowx, windowy, frame, temp, cols)
    add $a0, $t5, $zero
    add $a1, $t1, $zero
    add $a2, $t2, $zero
    add $a3, $t
