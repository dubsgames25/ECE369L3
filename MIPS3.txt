    .data
# 4x4 Window Array
window:  .word 1, 2, 3, 4       # First row
         .word 5, 6, 7, 8       # Second row
         .word 9, 10, 11, 12    # Third row
         .word 13, 14, 15, 16   # Fourth row

# 16x16 Frame Array
frame:   .word  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16  # First row
         .word 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32  # Second row
         .word 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48  # Third row
         .word 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64  # Fourth row
         .word 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80  # Fifth row
         .word 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96  # Sixth row
         .word 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112 # Seventh row
         .word 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128 # Eighth row
         .word 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 # Ninth row
         .word 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160 # Tenth row
         .word 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176 # Eleventh row
         .word 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192 # Twelfth row
         .word 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208 # Thirteenth row
         .word 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224 # Fourteenth row
         .word 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240 # Fifteenth row
         .word 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256 # Sixteenth row

    .text
    .globl main
main:
    # Prologue
    addi $sp, $sp, -8           # Adjust stack pointer
    sw   $ra, 4($sp)            # Save return address
    sw   $fp, 0($sp)            # Save frame pointer
    move $fp, $sp               # Set frame pointer

    # Load starting address of window and frame arrays
    la   $t0, window            # Load address of 4x4 window into $t0
    la   $t1, frame             # Load address of 16x16 frame into $t1

    # Searching for a match
    li   $t2, 0                 # Initialize row offset for 16x16 frame (outer loop)
loop_row:
    li   $t3, 0                 # Initialize column offset for 16x16 frame (inner loop)
loop_col:
    # Check if the 4x4 window matches at the current position in the 16x16 frame
    jal  MatchWindow            # Call function to check if window matches at frame[t2][t3]
    
    # Increment column offset
    addi $t3, $t3, 1            # t3 = t3 + 1
    li   $t4, 13                # Check if t3 < 13 (since 16 - 4 = 12 possible positions)
    bge  $t3, $t4, next_row     # If column offset >= 13, go to the next row
    j    loop_col               # Otherwise, continue searching in the current row

next_row:
    # Increment row offset
    addi $t2, $t2, 1            # t2 = t2 + 1
    li   $t5, 13                # Check if t2 < 13 (since 16 - 4 = 12 possible positions)
    bge  $t2, $t5, end_search   # If row offset >= 13, stop searching
    j    loop_row               # Otherwise, continue to the next row

end_search:
    # Set return value (assuming a match was found)
    li   $v0, 0                 # Return 0 (success)

    # Epilogue
    move $sp, $fp               # Restore stack pointer
    lw   $ra, 4($sp)            # Restore return address
    lw   $fp, 0($sp)            # Restore frame pointer
    addi $sp, $sp, 8            # Adjust stack pointer back
    jr   $ra                    # Return to caller

# Function: MatchWindow
# This function checks if the 4x4 window matches at the given position (t2, t3) in the frame.
MatchWindow:
    # Implementation goes here (compare the 4x4 window with the 16x16 frame)
    jr $ra                      # Return to the caller
