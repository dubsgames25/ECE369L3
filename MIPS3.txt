.data
asize0:  .word    4,  4,  2, 2   # i, j, k, l
frame0:  .word    0,  0,  1,  2
         .word    0,  0,  3,  4
         .word    0,  0,  0,  0
         .word    0,  0,  0,  0
window0: .word    1,  2
         .word    3,  4
         
newline: .asciiz     "\n" 
bracket_1: .asciiz     "[" 
bracket_2: .asciiz     "]" 
comma: .asciiz     "," 



.text

.globl main
main:
    la $t0, asize0
    lw $s0, 0($t0)  # Load the value of 'i' into $s0
    lw $s1, 4($t0)  # Load the value of 'j' into $s1
    lw $s2, 8($t0)  # Load the value of 'k' into $s2
    lw $s3, 12($t0) # Load the value of 'l' into $s3
    
    sub $s0,$s0,$s2
    sub $s1,$s1,$s3
    move $t3,$zero
loop:   
    
    ble  $t3, $s0, continue_loop 
move $t3,$zero
loop2:
 
 ble  $t9, $s3, continue_loop2
 move $t3,$zero
 loop3:


 bgez  $t3, continue_loop3


    j exit_function  # Otherwise, exit

continue_loop: 

    jal SAD_function
    addi $t3, $t3, 1  # Increment loop counter
    
    j loop # Repeat the loop
    
    
continue_loop2:


    
    j loop2 # Repeat the loop
    
    
    
continue_loop3:
  
    
    j loop3 # Repeat the loop
        

exit_function:
    li $v0, 10  # Exit system call
    syscall

SAD_function:
    la $t1, frame0
    sll $t2, $t3, 2
    add $t1, $t1, $t2
    lw $s5,0($t0)
    sll $s5 ,$s5,2
    
    
    
    la $t4, asize0
    add $t4,$t4,8
    lw $t4,($t4)
    
    la $t5, asize0
    add $t5,$t5,12
    lw $t5,($t5)
    

  
      
  move $t6,$zero
function_loop:
bge $t6,$t4,exit_loop


sll $t8, $t6,2
add $t1, $t1,$t8


la $t7, window0
sll $t8, $t6,2
add $t7, $t7,$t8


lw $t1,($t1)
lw $t7, ($t7)

sub $s4, $t7,$t1

bnez $s4, jump



la $s6, 12($t0)
lw $s6, 0($s6)

move $t9,$zero

loop_again:

bge $t9,$s6,exit_loop2

add $s7,$s7,$t1
sll $s7,$t9,4







addi $t9,$t9,1

j loop_again


exit_loop2:


addi $t6,$t6,1

j function_loop

 exit_loop:
    
jump:
  
    jr $ra
    
    
    
    
